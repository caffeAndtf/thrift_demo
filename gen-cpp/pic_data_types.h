/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef pic_data_TYPES_H
#define pic_data_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/stdcxx.h>




class Image;

typedef struct _Image__isset {
  _Image__isset() : data(false), width(false), height(false), channel(false) {}
  bool data :1;
  bool width :1;
  bool height :1;
  bool channel :1;
} _Image__isset;

class Image : public virtual ::apache::thrift::TBase {
 public:

  Image(const Image&);
  Image& operator=(const Image&);
  Image() : data(), width(0), height(0), channel(0) {
  }

  virtual ~Image() throw();
  std::string data;
  int32_t width;
  int32_t height;
  int32_t channel;

  _Image__isset __isset;

  void __set_data(const std::string& val);

  void __set_width(const int32_t val);

  void __set_height(const int32_t val);

  void __set_channel(const int32_t val);

  bool operator == (const Image & rhs) const
  {
    if (!(data == rhs.data))
      return false;
    if (!(width == rhs.width))
      return false;
    if (!(height == rhs.height))
      return false;
    if (!(channel == rhs.channel))
      return false;
    return true;
  }
  bool operator != (const Image &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Image & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Image &a, Image &b);

std::ostream& operator<<(std::ostream& out, const Image& obj);



#endif
