/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef PicSim_H
#define PicSim_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "pic_data_types.h"



#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class PicSimIf {
 public:
  virtual ~PicSimIf() {}
  virtual void get_sim_pics(std::vector<Image> & _return, const Image& img) = 0;
};

class PicSimIfFactory {
 public:
  typedef PicSimIf Handler;

  virtual ~PicSimIfFactory() {}

  virtual PicSimIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(PicSimIf* /* handler */) = 0;
};

class PicSimIfSingletonFactory : virtual public PicSimIfFactory {
 public:
  PicSimIfSingletonFactory(const ::apache::thrift::stdcxx::shared_ptr<PicSimIf>& iface) : iface_(iface) {}
  virtual ~PicSimIfSingletonFactory() {}

  virtual PicSimIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(PicSimIf* /* handler */) {}

 protected:
  ::apache::thrift::stdcxx::shared_ptr<PicSimIf> iface_;
};

class PicSimNull : virtual public PicSimIf {
 public:
  virtual ~PicSimNull() {}
  void get_sim_pics(std::vector<Image> & /* _return */, const Image& /* img */) {
    return;
  }
};

typedef struct _PicSim_get_sim_pics_args__isset {
  _PicSim_get_sim_pics_args__isset() : img(false) {}
  bool img :1;
} _PicSim_get_sim_pics_args__isset;

class PicSim_get_sim_pics_args {
 public:

  PicSim_get_sim_pics_args(const PicSim_get_sim_pics_args&);
  PicSim_get_sim_pics_args& operator=(const PicSim_get_sim_pics_args&);
  PicSim_get_sim_pics_args() {
  }

  virtual ~PicSim_get_sim_pics_args() throw();
  Image img;

  _PicSim_get_sim_pics_args__isset __isset;

  void __set_img(const Image& val);

  bool operator == (const PicSim_get_sim_pics_args & rhs) const
  {
    if (!(img == rhs.img))
      return false;
    return true;
  }
  bool operator != (const PicSim_get_sim_pics_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PicSim_get_sim_pics_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PicSim_get_sim_pics_pargs {
 public:


  virtual ~PicSim_get_sim_pics_pargs() throw();
  const Image* img;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PicSim_get_sim_pics_result__isset {
  _PicSim_get_sim_pics_result__isset() : success(false) {}
  bool success :1;
} _PicSim_get_sim_pics_result__isset;

class PicSim_get_sim_pics_result {
 public:

  PicSim_get_sim_pics_result(const PicSim_get_sim_pics_result&);
  PicSim_get_sim_pics_result& operator=(const PicSim_get_sim_pics_result&);
  PicSim_get_sim_pics_result() {
  }

  virtual ~PicSim_get_sim_pics_result() throw();
  std::vector<Image>  success;

  _PicSim_get_sim_pics_result__isset __isset;

  void __set_success(const std::vector<Image> & val);

  bool operator == (const PicSim_get_sim_pics_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const PicSim_get_sim_pics_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PicSim_get_sim_pics_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PicSim_get_sim_pics_presult__isset {
  _PicSim_get_sim_pics_presult__isset() : success(false) {}
  bool success :1;
} _PicSim_get_sim_pics_presult__isset;

class PicSim_get_sim_pics_presult {
 public:


  virtual ~PicSim_get_sim_pics_presult() throw();
  std::vector<Image> * success;

  _PicSim_get_sim_pics_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class PicSimClient : virtual public PicSimIf {
 public:
  PicSimClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  PicSimClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void get_sim_pics(std::vector<Image> & _return, const Image& img);
  void send_get_sim_pics(const Image& img);
  void recv_get_sim_pics(std::vector<Image> & _return);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class PicSimProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::apache::thrift::stdcxx::shared_ptr<PicSimIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (PicSimProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_get_sim_pics(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  PicSimProcessor(::apache::thrift::stdcxx::shared_ptr<PicSimIf> iface) :
    iface_(iface) {
    processMap_["get_sim_pics"] = &PicSimProcessor::process_get_sim_pics;
  }

  virtual ~PicSimProcessor() {}
};

class PicSimProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  PicSimProcessorFactory(const ::apache::thrift::stdcxx::shared_ptr< PicSimIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::apache::thrift::stdcxx::shared_ptr< PicSimIfFactory > handlerFactory_;
};

class PicSimMultiface : virtual public PicSimIf {
 public:
  PicSimMultiface(std::vector<apache::thrift::stdcxx::shared_ptr<PicSimIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~PicSimMultiface() {}
 protected:
  std::vector<apache::thrift::stdcxx::shared_ptr<PicSimIf> > ifaces_;
  PicSimMultiface() {}
  void add(::apache::thrift::stdcxx::shared_ptr<PicSimIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void get_sim_pics(std::vector<Image> & _return, const Image& img) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_sim_pics(_return, img);
    }
    ifaces_[i]->get_sim_pics(_return, img);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class PicSimConcurrentClient : virtual public PicSimIf {
 public:
  PicSimConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  PicSimConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void get_sim_pics(std::vector<Image> & _return, const Image& img);
  int32_t send_get_sim_pics(const Image& img);
  void recv_get_sim_pics(std::vector<Image> & _return, const int32_t seqid);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif



#endif
